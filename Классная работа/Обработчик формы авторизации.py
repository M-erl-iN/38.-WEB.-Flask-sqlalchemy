from flask import Flask, render_template, redirect, make_response, session, request, abortfrom data import db_sessionfrom data.users import Userfrom data.jobs import Jobsfrom flask_login import LoginManager, login_user, logout_user, login_required, current_userfrom forms.login_form import LoginFormimport datetimeapp = Flask(__name__)app.config['SECRET_KEY'] = 'yandexlyceum_secret_key'app.config['PERMANENT_SESSION_LIFETIME'] = datetime.timedelta(    days=365)login_manager = LoginManager()login_manager.init_app(app)@login_manager.user_loaderdef load_user(user_id):    db_sess = db_session.create_session()    return db_sess.query(User).get(user_id)@app.route("/")def index():    db_sess = db_session.create_session()    jobs = db_sess.query(Jobs).all()    users = db_sess.query(User).all()    return render_template("index.html", jobs=jobs, users=users)@app.route("/session_test")def session_test():    visits_count = session.get('visits_count', 0)    session['visits_count'] = visits_count + 1    return make_response(        f"Вы пришли на эту страницу {visits_count + 1} раз")@app.route('/login', methods=['GET', 'POST'])def login():    form = LoginForm()    if form.validate_on_submit():        db_sess = db_session.create_session()        user = db_sess.query(User).filter(User.email == form.email.data).first()        if user and user.check_password(form.password.data):            login_user(user, remember=form.remember_me.data)            return redirect("/")        return render_template('login.html',                               message="Неправильный логин или пароль",                               form=form)    return render_template('login.html', title='Авторизация', form=form)def main():    db_session.global_init("db/blogs.db")    app.run()if __name__ == '__main__':    main()